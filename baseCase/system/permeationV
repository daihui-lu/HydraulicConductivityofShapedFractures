/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      permeationV;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs        ("libutilityFunctionObjects.so");

type coded;

name permeationV;
codeWrite
#{
	//- Create U
	volVectorField U
	(
		IOobject
		(
			"U",
			mesh().time().timeName(),
            mesh(),
			IOobject::MUST_READ,
			IOobject::NO_WRITE
		),
		mesh()
	);

	//- Get wall patch
	label patchId = mesh().boundaryMesh().findPatchID("walls");

	//- Get velocity field at the boundary
	const fvPatchVectorField& UBf = U.boundaryField()[patchId];

	//- The permeation velocity is simply the velocity normal to the
	//  patch
	const scalarField V = UBf&UBf.patch().nf();

	//- This vector represents the spatial coordinates of the faces
	const vectorField x = UBf.patch().Cf();

	//- Write file if it is time to write
	//  This is csv format
	if(mesh().time().write())
	{
		std::ofstream file;
		file.open("permeationVel.csv", std::ios::out | std::ios::trunc);

		//- Write all the faces
		forAll(x,xi)
		{
		   file<< x[xi][0]  //- x coordinate
			   << " , " << V[xi] //- Permeation velocity
			   << " , " << x[xi][2] << "\n"; //- z coordinate
		}
	}
#};

// ************************************************************************* //
