/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
-------------------------------------------------------------------------------
Description
    Calculates planar averages for each point over a coordinate axis.

\*---------------------------------------------------------------------------*/
functionObjectLibs            ("libutilityFunctionObjects.so");

type            coded;

name averageProfile;

codeWrite
#{
	//- Sampling direction (e.g., x-axis)
	const vector sampDir(1,0,0);

	//- Number of samples (it can be the number of cells in x direction)
	const label nSamples(25);		

	//------------------------------------------------------------------------//

	//- Look up concentration objects in mesh() registry
	const volScalarField& p = mesh().lookupObject<volScalarField>("p");
	const volVectorField& U = mesh().lookupObject<volVectorField>("U");

	//- Lookup volume field
	const scalarField& V = mesh().V();

	//- Evaluate pressure gradient
	const tmp<volVectorField> tgradP(fvc::grad(p));
	const volVectorField& gradP = tgradP();

	//- Get grid max and min
	const scalar maxCoord(mesh().bounds().max()&sampDir);
	const scalar minCoord(mesh().bounds().min()&sampDir);

	//- Calculate delta sample
	const scalar delta
	(
		(
			(scalar(nSamples)-scalar(1.))*minCoord
		   + maxCoord
		)
	    /
		scalar(nSamples)
	);

	//- Create fields for samples
	vectorField gradPSample(nSamples,vector::zero);
	vectorField USample(nSamples,vector::zero);
	scalarField pSample(nSamples,0);

	//- Create field to store volumes
	scalarField volSample(nSamples,small);

	//- Sample fields
	forAll(mesh().cells(), cellI)
	{
		scalar coord = mesh().C()[cellI]&sampDir;

		label sampleID = std::floor((coord-minCoord)/delta);

		//- Add values to sample fields
		gradPSample[sampleID] += gradP[cellI]*V[cellI];
		USample[sampleID] += U[cellI]*V[cellI];
		pSample[sampleID] += p[cellI]*V[cellI];
		volSample[sampleID] += V[cellI];		
	}

	//- Sum from all processors 
  	reduce(gradPSample,sumOp<vectorField>());
	reduce(USample,sumOp<vectorField>());
	reduce(volSample,sumOp<scalarField>());
	reduce(pSample,sumOp<scalarField>());

	//- Write to file (master processor only)
  	if(Pstream::master())
	{ 

  		fileName Output_Dir = "./postProcessing";
  		OFstream out(Output_Dir/"foo");
  		autoPtr<std::ofstream> file;

		//Check if directory & file exists
  		if(!out.good())
		{ 
  			Info<< "Creating PostProcess directory: " <<endl;
  			
			mkDir(Output_Dir);
  			
			//- Reset file to a new ofstream
  			file.reset(new std::ofstream(Output_Dir/"averageSample.dat"));
  			
			//- Write header line 
  			file() <<"Time\t"
			  	   <<"coord\t"
				   <<"p\t"
			  	   <<"gradPx\t"
				   <<"gradPy\t"
				   <<"gradPz\t"
				   <<"Ux\t"
				   <<"Uy\t"
				   <<"Uz\t"
				   <<"vol\t";
  		}

  		//- Reset file to new ofstream that appends 
  		file.reset
		(
			new std::ofstream
			(
				Output_Dir/"averageSample.dat", 
				std::ios::out | std::ios::app
			)
		);
		
        //- Write data
		forAll(gradPSample,i)
		{
			//- Write current time
			file() << mesh().time().timeName()<<"\t";
			
			//- Write coordinate
			file() << minCoord + (scalar(i)+scalar(.5))*delta <<"\t" ;
			
			//Write samples
			file() << pSample[i]/volSample[i] << "\t"
			       << gradPSample[i].x()/volSample[i] << "\t"
			       << gradPSample[i].y()/volSample[i] << "\t"
			       << gradPSample[i].z()/volSample[i] << "\t"
			       << USample[i].x()/volSample[i]     << "\t"
			       << USample[i].y()/volSample[i]     << "\t"
			       << USample[i].z()/volSample[i]     << "\t"
			        << volSample[i]                   << "\n";
        }
  	}

#};
